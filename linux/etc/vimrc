" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

if v:lang =~ "^ko"
   set fileencodings=euc-kr
   set guifontset=-*-*-medium-r-normal--16-*-*-*-*-*-*-*
elseif v:lang =~ "^ja_JP"
   set fileencodings=euc-jp
   set guifontset=-misc-fixed-medium-r-normal--14-*-*-*-*-*-*-*
elseif v:lang =~ "^zh_TW"
   set fileencodings=big5
   set guifontset=-sony-fixed-medium-r-normal--16-150-75-75-c-80-iso8859-1,-taipei-fixed-medium-r-normal--16-150-75-75-c-160-big5-0
elseif v:lang =~ "^zh_CN"
   set fileencodings=gb2312
   set guifontset=*-r-*
endif
if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
   set fileencodings=utf-8
endif

set term=$TERM
set nocompatible	" Use Vim defaults (much better!)
set encoding=utf-8
set bs=2		" allow backspacing over everything in insert mode
"set ai			" always set autoindenting on
"set backup		" keep a backup file
set viminfo='20,\"50	" read/write a .viminfo file, don't store more
			" than 50 lines of registers
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set number
set showcmd
"set nowrap
set shiftwidth=4
set softtabstop=4
set expandtab
set tabstop=4
set wrap
set ffs=unix
set foldmethod=marker
set mouse=a
set ttymouse=xterm2 " for tmux mouse mode
" folding start
set fdc=2
set fcs+=fold:\     " set fold's fillchars to space 
set foldtext=getline(v\:foldstart).'\ ...\ +'.(v:foldend-v:foldstart)
hi Folded ctermbg=NONE ctermfg=6
hi FoldColumn ctermbg=NONE ctermfg=6
" folding end
filetype plugin indent on
" python dict
let g:pydiction_location = '~/.vim/after/ftplugin/pydict/complete-dict'

" Only do this part when compiled with support for autocommands
if has("autocmd")
  " In text files, always limit the width of text to 78 characters
  autocmd BufRead *.txt set tw=78
  " When editing a file, always jump to the last cursor position
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal g'\"" |
  \ endif
endif

" Don't use Ex mode, use Q for formatting
map Q gq
map [H ^
map [F $

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

if has("autocmd")
 augroup cprog
  " Remove all cprog autocommands
  au!

  " When starting to edit a file:
  "   For C and C++ files set formatting of comments and set C-indenting on.
  "   For other files switch it off.
  "   Don't change the order, it's important that the line with * comes first.
  autocmd FileType *      set formatoptions=tcql nocindent comments&
  autocmd FileType c,cpp  set formatoptions=qroct cindent comments=sr:/*,mb:*,el:*/,://
  "autocmd FileType c,cpp  set formatoptions=croql cindent comments=sr:/*,mb:*,el:*/,://
 augroup END

" augroup gzip
"  " Remove all gzip autocommands
"  au!
"
"  " Enable editing of gzipped files
"  "	  read:	set binary mode before reading the file
"  "		uncompress text in buffer after reading
"  "	 write:	compress file after writing
"  "	append:	uncompress file, append, compress file
"  autocmd BufReadPre,FileReadPre	*.gz set bin
"  autocmd BufReadPost,FileReadPost	*.gz let ch_save = &ch|set ch=2
"  autocmd BufReadPost,FileReadPost	*.gz '[,']!gunzip
"  autocmd BufReadPost,FileReadPost	*.gz set nobin
"  autocmd BufReadPost,FileReadPost	*.gz let &ch = ch_save|unlet ch_save
"  autocmd BufReadPost,FileReadPost	*.gz execute ":doautocmd BufReadPost " . expand("%:r")
"  autocmd BufWritePost,FileWritePost	*.gz !mv <afile> <afile>:r
"  autocmd BufWritePost,FileWritePost	*.gz !gzip <afile>:r
"  autocmd FileAppendPre			*.gz !gunzip <afile>
"  autocmd FileAppendPre			*.gz !mv <afile>:r <afile>
"  autocmd FileAppendPost		*.gz !mv <afile> <afile>:r
"  autocmd FileAppendPost		*.gz !gzip <afile>:r
" augroup END
endif
if &term=="xterm"
     set t_Co=8
     set t_Sb=^[4%dm
     set t_Sf=^[3%dm
endif

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
	 	\ | wincmd p | diffthis

" some extra commands for HTML editing
nmap ,mh wbgueyei<<ESC>ea></<ESC>pa><ESC>bba
nmap ,h1 _i<h1><ESC>A</h1><ESC>
nmap ,h2 _i<h2><ESC>A</h2><ESC>
nmap ,h3 _i<h3><ESC>A</h3><ESC>
nmap ,h4 _i<h4><ESC>A</h4><ESC>
nmap ,h5 _i<h5><ESC>A</h5><ESC>
nmap ,h6 _i<h6><ESC>A</h6><ESC>
nmap ,hb wbi<b><ESC>ea</b><ESC>bb
nmap ,he wbi<em><ESC>ea</em><ESC>bb
nmap ,hi wbi<i><ESC>ea</i><ESC>bb
nmap ,hu wbi<u><ESC>ea</i><ESC>bb
nmap ,hs wbi<strong><ESC>ea</strong><ESC>bb
nmap ,ht wbi<tt><ESC>ea</tt><ESC>bb
nmap ,hx wbF<df>f<df>

" 256 color scheme {
if &term =~ "256color"
    set t_Co=256
    let python_highlight_all = 1
    let c_gnu = 1
    " SYNTAX HIGHLIGHTING
    hi Comment      cterm=NONE      ctermfg=66  ctermbg=NONE
    " STATUS
    hi StatusLine   cterm=reverse   ctermfg=111 ctermbg=0
    hi StatusLineNC cterm=reverse   ctermfg=238 ctermbg=245
    " INTERFACE
    hi LineNr       cterm=NONE      ctermfg=240 ctermbg=NONE
    hi VertSplit    cterm=NONE      ctermfg=110 ctermbg=NONE
    " TABS
    hi TabLine      cterm=NONE      ctermfg=109 ctermbg=238
    hi TabLineFill  cterm=NONE      ctermfg=220 ctermbg=238
    hi TabLineSel   cterm=NONE      ctermfg=82  ctermbg=NONE
    " Syntax
    hi Search       ctermfg=0       ctermbg=226
    hi String       ctermfg=9
    hi Constant     ctermfg=196
    hi Statement    ctermfg=3
    hi Directory    ctermfg=111
endif
" }

"{+----------------------------------------- Embira Footer 1.6 ---------+
" | vim<600:set et sw=4 ts=4 sts=4:                                     |
" | vim600:set et sw=4 ts=4 sts=4 ff=unix cindent fdm=marker fmr={,}:   |
" +---------------------------------------------------------------------+}
